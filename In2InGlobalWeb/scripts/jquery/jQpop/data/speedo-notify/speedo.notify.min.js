/*
 *	speedo.notify.js
 *
 *	Speedo Notify v1.0.1
 *
 *	Speedo Notify is a lightweight jQuery plugin
 *	with powerful customization settings.
 *
 *	http://www.artflow.ro
 *	http://www.agapastudio.com
 *
 *	Copyright (c) 2013 By Artflow & Agapa Studio.All rights reserved.
 *
 *	License:
 *		http://www.agapastudio.com/licenses/speedo-notify
 */

(function ($, window)
{
	/*
	 *	speedo - Create main core.
	 */
	var speedo = function ()
	{
		return new speedo.fn.init();
	};

	speedo.fn = speedo.prototype = 
	{
		version: '1.0.1',
		constructor: speedo,
		init: function ()
		{
			return this;
		}
	};

	// Prepare for later instantiation.
	speedo.fn.init.prototype = speedo.fn;

	// Make speedo global.
	window.speedo = speedo;

})(jQuery, window);

(function ($, speedo)
{
	/*
		*	browser() - Handle browser detection.
		*/
	speedo.fn.browser = (function ()
	{
		var object = {};
		var browsers = ['opera', 'chrome', 'safari', 'firefox'];

		object.is_ie = (function ()
		{
			var virtual_div = document.createElement('div');
		
			virtual_div.innerHTML = '<!--[if IE]><i></i><![endif]-->';

			return (virtual_div.getElementsByTagName('i')[0] != null);
		})();

		// Add other browsers values.
		for (key in browsers)
		{
			var user_agent = navigator.userAgent;
			var matches = user_agent.match(new RegExp(browsers[key], 'i'));

			object['is_' + browsers[key]] = (matches !== null);
		}

		if (object.is_ie)
		{
			var ver = 3;
			var div = document.createElement('div');
			var all = div.getElementsByTagName('i')

			while (div.innerHTML = '<!--[if gt IE ' + (++ver) + ']><i></i><![endif]-->', all[0])
				;		// We don't want to do anything.

			object.version = new String(ver > 4 ? ver : 0);
			object.version.high = object.version;
		}
		else
		{
			var app_name = navigator.appName;
			var user_agent = navigator.userAgent;

			var matches = user_agent.match(/(opera|chrome|safari|firefox)\/?\s*(\.?\d+(\.\d+)*)/i);

			var temp;

			if (matches && (temp = user_agent.match(/version\/([\.\d]+)/i)) != null)
			{
				matches[2] = temp[1];
			}

			matches = (matches) ? matches[2] : navigator.appVersion;

			object.version = new String(matches);
			object.version.high = parseInt(object.version);
		}

		return object;
	})();

})(jQuery, speedo);

(function ($, speedo)
{
	/*
		*	speedo.utility - Utility functions.
		*/
	speedo.fn.utility = (function ()
	{
		var self = {};

		/*
			*	set_cookie() - Create and set Cookie.
			*
			*	PARAMETERS:
			*		name		- Specifies the cookie name.
			*		value		- Specifies the cookie value.
			*		expireDays	- Specifies the expiration date of the cookie in days.
			*/
		self.set_cookie = function (name, value, expire_days)
		{
			var date = new Date();

			date.setDate(date.getDate() + expire_days);

			var value = escape(value) + ((expire_days == null) ? '' : '; expires='+date.toUTCString());

			document.cookie = name + '=' + value;
		}

		/*
			*	get_cookie() - Get a specific cookie by name.
			*
			*	PARAMETERS:
			*		name	- The name of the cookie.
			*
			*	RETURN VLAUE:
			*		If the cookie has been found, the function returns the value of the cookie.
			*		If the cookie was not found, the function returns NULL.
			*/
		self.get_cookie = function (name)
		{
			var cookies = document.cookie.split(';');
			var cookie_name = '';
			var cookie_value = '';
			var cookie = [];

			for (var i = 0; i < cookies.length; i++)
			{
				cookie = cookies[i].split('=');

				cookie_name = cookie[0].replace(/^\s+|\s+$/g, ""); 
				cookie_value = cookie[1];

				if (cookie_name == name)
				{
					return unescape(cookie_value);
				}
			}

			return null;
		}

		/*
			*	query_parameter() - Read query url values.
			*
			*	PARAMETERS:
			*		query	- The url from wich to read the code.
			*
			*	RETURN VALUE:
			*		If the function succeds the return value is the query parametes as an object with name and value,
			*		otherwise the return value is an empty object.
			*/
		self.query_parameters = function (query)
		{
			var query = query.split("+").join(" ");

			query = query.split('?')[1];

			var params = {};
			var regex = /[?&]?([^=]+)=([^&]*)/g;
			var tokens;

			while (tokens = regex.exec(query))
			{
				params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
			}

			return params;
		};

		/*
			*	same_domain() - Check if the urls are from the same domain.
			*
			*	PARAMETERS:
			*		url_a	- First url.
			*		url_b	- Second url.
			*
			*	RETURN VALUE:
			*		If the url is from the same domain, the return value is true, otherwise is false.
			*/
		self.same_domain = function (url_a, url_b)
		{
			var match_a = url_a.match(/^(https?:\/\/)?([\da-z\.-]+)\/?/);
			var match_b = url_b.match(/^(https?:\/\/)?([\da-z\.-]+)\/?/);

			alert(match_b);

			if (match_a[3] == undefined || match_b[3] == undefined)
			{
				return false;
			}

			return (match_a[3].toLower() == match_b[3].toLower())
		};

		return self;

	})();

})(jQuery, speedo);

(function ($, speedo)
{
	/*
	 *	notify - Create main notify core.
	 */
	var notify = function (options)
	{
		return new notify.fn.init(options);
	};

	notify.fn = notify.prototype = 
	{
		version: '1.0.1',
		constructor: notify,
		init: function (options)
		{
			/* Private vaiables */
			var self = this;
	
			var left = 0;
			var top = 0;
			var width = 0;
			var height = 0;

			var position = 'top';

			var container = null;
			var closeBtn = null;
			var contentHolder = null;

			var modules = [];

			var embededObject = false;
			var imageList = /\.(jpg|jpeg|gif|png|bmp|tiff)(.*)?$/i;
			var videoList =
			{
				swf:
				{
					regex: /[^\.]\.(swf)\s*$/i
				}
			};

			/* Public variables */
			this.instance_name = 'instance_' + (Math.random() * 5233);

			this.extend = new Extend();

			this.container = null;
			this.contentHolder = null;

			/*
			 *	create() - Create the html structure of the notify.
			 */
			this.create = function ()
			{
				// Make sure the theme string is lowercase.
				options.theme = options.theme.toLowerCase();

				// Theme class.
				var theme_class = (options.theme && options.theme != 'default') ? ' speedo-theme-' + options.theme : '';

				// Count the ammount of starts.
				if (options.startCount > 0)
				{
					var started = speedo().utility.get_cookie('speedo-notify-start-count');

					started = (started) ? started : 0;

					if (started >= options.startCount)
					{
						return;
					}
					else
					{
						started++;
						speedo().utility.set_cookie('speedo-notify-start-count', started, options.interval);
					}
				}

				$('body').addClass('speedo-notify-ready');

				container = $(document.createElement('div'));
				container.addClass('speedo-notify-container'+theme_class);

				self.container = container;

				container.hide();
				
				self.setPosition(options.position);

				container.appendTo('body');
		
				// Create the content holder.
				contentHolder = $(document.createElement('div'));
				contentHolder.addClass('speedo-notify-content');
				contentHolder.appendTo(container);
				
				self.contentHolder = contentHolder;

				var contentType = getContentType();

				self.setContent((contentType != "html") ? options.href : options.htmlContent, contentType);

				if (options.close)
				{
					closeBtn = $(document.createElement('a'));
			
					closeBtn.addClass('speedo-notify-close');
					closeBtn.attr('href', 'javascript: void(0);');
					closeBtn.bind('click tap', function (ev) { options.onClose(ev); self.hideNotify();});
					closeBtn.html(options.closeCaption);
			
					container.append(closeBtn);
				}

				// Execute all loaded modules.
				this.modules.execute(self, options);

				// On before show.
				options.onBeforeShow(container.get(0));

				self.showNotify();
			};
	
			/*
			 *	init() - Initialize events and notify.
			 */
			this.init = function ()
			{
				if (options.esc)
				{
					$(document).bind('keydown', onKeyDown);
				}
			};
	
			/*
			 *	showNotify() - Show the notify.
			 */
			this.showNotify = function ()
			{
				if (embededObject)
				{
					var type = getContentType();
					self.setContent(options.href, type);
				}

				// If ther is no function which extends the show, then we show the notify.
				if (!self.extend.trigger('show') || options.effectIn == null || options.effectOut == 'none')
				{
					container.show();
				}

				// Callback.
				options.onShow(container.get(0));

				if (!options.cover)
				{
					self.slidePage(options.position);
				}

				if (options.autoClose)
				{
					setTimeout(function(){ self.hideNotify();}, options.autoClose);
				}
			};
	
			/*
			 *	hideNotify() - hide the notify.
			 */
			this.hideNotify = function ()
			{
				// If ther is no function which extends the hide, then we hide the notify.
				if (!self.extend.trigger('hide') || options.effectOut == null || options.effectOut == 'none')
				{
					container.hide();

					// We need to remove the flash beacuse we don't want to have the movie/music playing in background.
					self.remove_embeded_object();

					/*self.autoChangeContent(false);
					$(this).removeClass("pause").addClass("play");*/

					if (options.unload)
					{
						container.remove();
					}
				}

				if (!options.cover)
				{
					self.slidePage(true);
				}
		
				// On Hide.
				options.onHide(container.get(0));
			};

			/*
			 *	setPosition() - Set notify position.
			 *
			 *	PARAMETERS:
			 *		position	- The position to set, values: 'top', 'right', 'bottom', 'left'.
			 */
			this.setPosition = function (pos)
			{
				var size = {};

				switch (pos)
				{
					case 'top':
						size.right = 0;
						size.height = (options.height) ? options.height : 'auto';
						size.left = 0;
						size.top = 0;
						break;

					case 'right':
						size.height = (options.width) ? options.width : '100%';
						size.right = 0;
						size.top = 0;
						size.bottom = 0;
						break

					case 'bottom':
						size.right = 0;
						size.height = (options.height) ? options.height : 'auto';
						size.left = 0;
						size.bottom = 0;
						break;

					case 'left':
						size.height = (options.width) ? options.width : '100%';
						size.left = 0;
						size.top = 0;
						size.bottom = 0;
						break
				}

				position = pos;

				container.addClass('notify-' + pos);
				container.css(size);
			};

			/*
			 *	slidePage() - Slide the webpage so we can fit our container.
			 *
			 *	PARAMETERS:
			 *		hide - The container is hiding.
			 */
			this.slidePage = function (hide)
			{
				if (options.position != 'top')
				{
					return ;
				}

				if (hide === true)
				{
					$('html').animate({'margin-top': ''}, 'slow');
					return ;
				}

				$('html').animate({'margin-top': container.height()}, 'slow');
			};
	
			/*
			 *	setContent() - Set notify content.
			 *
			 *	PARAMETERS:
			 *		content		- The contentent.
			 *		type		- The content type.
			 *		complete	- Content loading complete.
			 *
			 *	NOTE:
			 *		If the type is not specified, the function will try to determine
			 *		the type based on the provided content.
			 */
			this.setContent = function (content, type, complete)
			{
				var contentType = (type) ? type : getContentType(content);
				var complete = (complete) ? complete : function () {};

				// Clear the old content.
				contentHolder.html('');

				if (contentType == "html")
				{
					contentHolder.html(content);

					options.onComplete(container.get(0), contentType);
					complete(container.get(0), contentType);
				}
				else if (contentType == "image")
				{
					var image = new Image();

					image.src	= content;
					$(image).load(function (ev)
					{
						options.onComplete(container.get(0), contentType);
						complete(container.get(0), contentType);
					});
					contentHolder.append(image);
				}
				else if (contentType == "ajax")
				{
					// Use ajax to load the notify content.
					$.ajax({
						type: content.type,
						data: content.data,
						url: content.url,
						beforeSend: function ()
						{
						},
						success: function (data)
						{
							contentHolder.html(data);
							// On complete.
							options.onComplete(container.get(0), contentType);
							complete(container.get(0), contentType);
						}
					});
				}
				else if (contentType == "iframe")
				{
					var iFrameContent = $(document.createElement('iframe'));

					iFrameContent.attr('border', 0);
					iFrameContent.attr('frameBorder', 0);
					iFrameContent.attr('marginwidth', 0);
					iFrameContent.attr('marginheight', 0);
					iFrameContent.css({width: options.width, height: options.height});
					iFrameContent.get(0).src = options.href;
					iFrameContent.load(function ()
					{
						// On complete.
						options.onComplete(container.get(0), contentType);
						complete(container.get(0), contentType);
					});

					contentHolder.append(iFrameContent);
				}
				else if (contentType == "flash")
				{
					var flashObject = buildFlashObject(content, options.width, options.height, options.flashvars);

					contentHolder.append(flashObject);

					setTimeout(function ()
					{
						// On complete.
						options.onComplete(container.get(0), contentType);
						complete(container.get(0), contentType);
					}, 80);

					//contentHolder.append(flashObject);
				}
				else	// Unkonown content type.
				{
					contentHolder.html(content);

					options.onComplete(container.get(0), contentType);
					complete(container.get(0), contentType);
				}
			};

			/*
			 *	width() - Get or set the notify width.
			 *
			 *	PARAMETERS:
			 *		value	- The new width value.
			 *		animate	- Animate the resize. Default is true.
			 *
			 *	RETURN VALUE:
			 *		Returns the current width of the notify.
			 */
			this.width = function (value, animate)
			{
				var oldValue = width;
				var animate = (animate == undefined) ? true : animate;

				if (value)
				{
					width = value;

					if (animate)
					{
						container.animate({width: value, left: Math.floor(value / 2)}, "slow");
					}
					else
					{
						container.css('width', value);
					}
				}

				return oldValue;
			};

			/*
			 *	height() - Get or set the notify height.
			 *
			 *	PARAMETERS:
			 *		value	- The new height value.
			 *		animate	- Animate the resize. Default is true.
			 *
			 *	RETURN VALUE:
			 *		Returns the current height of the notify.
			 */
			this.height = function (value, animate)
			{
				var oldValue = height;
				var animate = (animate == undefined) ? true : animate;

				if (value)
				{
					height = value;

					if (animate)
					{
						container.animate({height: value, top: Math.floor(value / 2)}, "slow");
					}
					else
					{
						container.css('height', value);
					}
				}

				return oldValue;
			};

			/*
			 *	remove_embeded_object() - Remove embeded objects.
			 */
			this.remove_embeded_object = function ()
			{
				if (embededObject)
				{
					contentHolder.html(' ');
				}
			};

			/*
			 *	get_box_size() -  Get left, top, width, height.
			 */
			this.get_box_size = function ()
			{
				return {left: left, top: top, width: width, height: height};
			};


			/* Private Functions */

			/*
			 *	getContentType() - Get the content type.
			 *
			 *	PARAMETERS:
			 *		content	- Content.
			 *
			 *	RETURN VALUE:
			 *		Returns the type of the content.
			 */
			function getContentType(content)
			{
				var content = (content) ? content : options.href;
				var videoId = '';

				// Reset the embededObject.
				embededObject = false;

				if ((content == null || content == '') && options.htmlContent)
				{
					return 'html';
				}

				if (content.match(imageList))	// Check if the link is a image.
				{
					return 'image';
				}

				var type = '';

				$.each(videoList, $.proxy(function (i, e)
				{
					if (content.split('?')[0].match(e.regex))
					{
						if (e.token)
						{
							if (i =='vimeo' && content.split('/')[3] == 'video')
							{
								e.index = 4;
							}
							var videoId = content.split(e.token)[e.index].split('?')[0].split('&')[0];

							content = e.url.replace('{id}', videoId);

							//options.href = content;
						}

						// Set the default values for the  embeded flash.
						options.width = (options.width) ? options.width : 640;
						options.height = (options.height) ? options.height : 360;

						options.href = content;

						embededObject = true;

						type = (e.iframe) ? 'iframe' : 'flash';
					}
				}, this));

				if (type == '')
				{
					// If we want to use iFrame.
					if (options.useFrame || content.indexOf('http') >= 0)
					{
						type = "iframe";
						embededObject = true;
						options.href = content;
					}
					else
					{
						type = 'ajax';
					}

					var idStart = content.indexOf('#');

					if (idStart === 0)
					{
						var object = content.substr(idStart);

						object = $(object);

						if (object.length > 0)
						{
							type = 'html';
							options.htmlContent = object.html();
						}
					}
				}

				return type;
			}

			/*
			 *	buildFlashObject() - Create the object tag for embeding flash file.
			 *
			 *	PARAMETERS:
			 *		href		- swf location.
			 *		width		- width of the swf.
			 *		height		- height of the swf.
			 *		flashvars	- flash vars.
			 *
			 *	RETURN VALUE:
			 *		Returns the html object.
			 */
			function buildFlashObject(href, width, height, flashvars)
			{
				var flashvars = (flashvars || flashvars == '') ? 'autostart=1&autoplay=1&fullscreenbutton=1' : flashvars;

				/*
				 *	Note: We build all the object and create it one time, for 2 reasons:
				 *		1. IE8 will not append any element to the object tag.
				 *		2. This way is faster than creating evrey element separately, but costs file size.
				 */
				var object = '<object width="'+width+'" height="'+height+'" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000">';

				object += '<param name="movie" value="'+href+'" />'+
						  '<param name="allowFullScreen" value="true" />'+
						  '<param name="allowscriptaccess" value="always" />'+
						  '<param name="wmode" value="transparent" />'+
						  '<param name="autostart" value="true" />'+
						  '<param name="autoplay" value="true" />'+
						  '<param name="flashvars" value="'+flashvars+'" />'+
						  '<param name="width" value="'+width+'" />'+
						  '<param name="height" value="'+height+'" />';

				object += '<embed src="'+href+'" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true"'+
									' autostart="true" autoplay="true" flashvars="'+flashvars+'" wmode="transparent" width="'+width+'"'+
									' height="'+height+'" style="margin: 0; padding: 0" />';

				object += '</object>';

				// Create and return the object.
				return $(object);
			}
	
			/*
			 *	onKeyDown() - On key down event for the whole page.
			 */
			function onKeyDown(ev)
			{
				var keyCode = ev.keyCode || ev.charCode || ev.which;
		
				if (keyCode == 27)		// Escape code.
				{
					self.hideNotify();
				}
			}

			return this;
		}
	};

	// Prepare for later instantiation.
	notify.fn.init.prototype = notify.fn;


	/*
	 *	Extend() - Class to handle the extending part of the notify.
	 *
	 *	Note:
	 *		The actions will not be asynchronus.
	 */
	function Extend()
	{
		var actions = {};

		/*
		 *	add_action() - Add an action to the stack to be executed later by the trigger function.
		 *
		 *	PARAMETERS:
		 *		name		- Action name identifier.
		 *		callback	- Function callback.
		 */
		this.add_action = function (name, callback)
		{
			if (actions[name] == undefined)
			{
				actions[name] = [];
			}

			actions[name].push(callback);
		};

		/*
		 *	remove_action() - Remove an action from the stack.
		 *
		 *	PARAMETERS:
		 *		name		- Action name identifier.
		 *		callback	- Function callback.
		 */
		this.remove_action = function (name, callback)
		{
			if (actions[name] != undefined)
			{
				for (key in actions[name])
				{
					if (actions[name][key] === callback)
					{
						actions[name] = actions[name].splice(key, 1);
					}
				}
			}
		};

		/*
		 *	trigger() - Trigger an action.
		 *
		 *	PARAMETERS:
		 *		name	- Action name identifier.
		 *		data	- Additional data to send to the action.
		 */
		this.trigger = function (name, data)
		{
			var result = false;

			if (actions[name] != undefined)
			{
				for (key in actions[name])
				{
					if ($.isFunction(actions[name][key]))
					{
						actions[name][key](data);

						result = true;
					}
				}
			}

			return result;
		};
	}

	/*
	 *	Events() - Handle notify events.
	 */
	function Events()
	{
		var self = this;
		var $ = jQuery;
	
		var jSelf = $(this);	// jQuery Self.

		/*
		 *	bind() - Bind an event to this instance of the event manager.
		 *
		 *	PARAMETERS:
		 *		event_type	- A string containing one or more event types.
		 *		event_data	- A map of data that will be passed to the event handler.
		 *		event_object	- A function to execute each time the event is triggered.
		 */
		this.bind = function (event_type, event_data, event_object)
		{
			return jSelf.bind(event_type, event_data, event_object);
		};
	
		/*
		 *	unbind() - Unbind an event from this instance of the event manager.
		 *
		 *	PARAMETERS:
		 *		event_type	- A string containing one or more event types.
		 *		event_object	- The function that is to no longer be executed.
		 */
		this.unbind = function (event_type, event_object)
		{
			return jSelf.unbind(event_type, event_object);
		};
	
		/*
		 *	trigger() - Trigger an event attached to this instance of the event manager.
		 *
		 *	PARAMETERS:
		 *		event_type	- A string containing an event type.
		 *		event_data	- Additional parameters to pass along to the event handler.
		 */
		this.trigger = function (event_type, event_data)
		{
			return jSelf.trigger(event_type, event_data);
		};
	}

	// Register event manager.
	notify.fn.events = new Events();

	// Register notify plugin.
	speedo.fn.notify = notify;

})(jQuery, speedo);


(function ($)
{
	/*
	 *	speedoNotify() - Speedo Notify plugin.
	 */
	$.fn.speedoNotify = function (options)
	{
		var defaultOptions = {
			width: null,
			height: null,
			position: 'top',
			cover: true,
			close: true,
			closeCaption: '',
			theme: 'default',
			htmlContent: '<p> Default content </p>',
			href: null,
			esc: true,
			autoClose: false,
			autoShow: false,
			startCount: 0,
			interval: 30,		// 30 Days default.
			useFrame: false,
			useAjax: false,
			unload: false,
			responsive: true,
			ajaxContent:
			{
				url: "",
				type: "POST",
				data: null
			},
			buttons: null,

			// Callbacks
			onBeforeShow: function () {},		// Before the notify is showing.
			onShow: function () {},				// When the notify is showing.
			onComplete: function () {},			// After the notify content finished loading.
			onHide: function () {},				// When the notify is hiding.
			onClose: function () {}				// When the close button was clicked.
		};

		if (options.href && options.useFrame == null)
		{
			options.useFrame = true;
		}
		
		var options = $.extend(true, defaultOptions, options);
		
		var notifyInstance = null;
		
		if (!this.data('unique-speedo-instance') || options.unload)
		{
			notifyInstance = speedo().notify(options);
			
			// Wait until the autoShow time passes and then create and show the notify.
			if (options.autoShow)
			{
				setTimeout(function(){ notifyInstance.create(); }, options.autoShow);
			}
			else
			{
				notifyInstance.create();
			}
			
			this.data('unique-speedo-instance', notifyInstance);
		}
		else
		{
			notifyInstance = this.data('unique-speedo-instance');
			
			// Wait until the autoShow time passes and then show the notify.
			if (options.autoShow)
			{
				setTimeout(function(){ notifyInstance.showNotify(); }, options.autoShow);
			}
			else
			{
				notifyInstance.showNotify();
			}
			
		}
		
		return notifyInstance;
	};

	$(function ()
	{
		$(document).on('click tap', '.speedo-notify', function (ev)
		{
			ev.preventDefault();

			var $cliked = $(this);
			var href	= $cliked.attr('href');

			if ($(this).data('speedoOptions') != undefined)
			{
				query = $(this).data('speedoOptions');

				var options = $.extend({
					htmlContent: false,
					effectIn: 'fade',
					effectOut: 'fade'
				}, query);
			}

			if (options.useAjax)
			{
				options.ajaxContent = {
					url: href,
					type: "GET",
					data: null
				}
			}

			options.href = href;

			$(this).speedoNotify(options);
		});
	});

})(jQuery);

(function ($, notify)
{
	/*
	 *	modules - Create main core.
	 */
	var modules = function ()
	{
		return new modules.fn.init();
	};

	modules.fn = modules.prototype = 
	{
		version: '1.0.1',
		constructor: modules,
		init: function ()
		{
			var modules_list = {};

			/*
			 *	register_module() - Add a module in the execute list.
			 */
			this.register_module = function (name, callback)
			{
				modules_list[name] = callback;
			};

			/*
			 *	deregister_module() - Remove a module from the execute list.
			 */
			this.deregister_module = function (name)
			{
				modules_list[name] = null;
			};

			/*
			 *	clear() - Remove all modules from the execute list.
			 */
			this.clear = function ()
			{
				modules_list = {};
			};

			/*
			 *	execute() - Execute modules.
			 */
			this.execute = function (instance, options)
			{
				for (key in modules_list)
				{
					var module = modules_list[key];

					if ($.isFunction(module))
					{
						var module_instance = module.apply(instance, [options]);

						if (module_instance != null)
						{
							module_instance.init();
						}
					}
				}

				return null;
			};

			return this;
		}
	};

	// Prepare for later instantiation.
	modules.fn.init.prototype = modules.fn;

	// Create a new instance of the modules in the popup class.
	notify.fn.modules = modules();

})(jQuery, speedo().notify);

(function ($, notify, speedo)
{
	/*
	 *	effects() - Handle notify drag.
	 */
	notify.fn.modules.register_module('effects', function (options)
	{
		var $window = $(window);
		var container = this.container;
		var self = this;

		var left = 0;
		var top = 0;
		var width = 0;
		var height = 0;


		this.handleEffects = handleEffects;

		/*
		 *	init() - Initialize module.
		 */
		this.init = function ()
		{
			options = $.extend(
			{
				effectIn: 'none',
				effectOut: 'none',
				css3Effects: false
			}, options);

			// Set CSS3 effects to a random effect.
			if (options.css3Effects == "random")
			{
				var randomEffects = ["none", "slideTop", "slideBottom", "slideLeft", "slideRight",
									 "zoomOut", "flipInHor", "flipInVer", "bounceIn", "pageTop",
									 "fadeInScale", "pulse", "leftSpeedIn", "rollIn", "rollOut"];

				options.css3Effects = randomEffects[Math.floor(Math.random() * (randomEffects.length - 1))];
			}
			else if (options.css3Effects == "auto")
			{
				var effect = 'slide' +  options.position.charAt(0).toUpperCase() + options.position.substr(1);

				options.css3Effects = effect;
			}

			if (options.css3Effects && options.css3Effects != "none")
			{
				container.addClass("speedo-effect-"+options.css3Effects.toLowerCase());
			}

			// Extend the show and hide functionality so we can add effects to show and hide.
			self.extend.add_action('show', on_show);
			self.extend.add_action('hide', on_hide);
		};

		/*
		 *	animateNotify() - Animate the notify for showing or hiding.
		 *
		 *	PARAMETERS:
		 *		effect		- Specify the effect to use. You can use one of the following:
		 *						'fade'			- Fade in/out effect.
		 *						'slideLeft'		- Slide left effect.
		 *						'slideRight'	- Slide right effect.
		 *		speed		- Specify the effect speed.
		 *		show		- Specify if the animation is for showing the notify or hidding the notify.
		 *		callback	- Speicfy a callback to be called when the animation finished.
		 */
		this.animateNotify = function (effect, speed, show, callback)
		{
			var callback = ($.isFunction(callback)) ? callback : function () {};
			//var effect = effect + ((show) ? 'In' : 'Out');

			if (show)
			{
				container.hide();
			}

			switch (effect)
			{
			case 'slideLeft':
					if (show)
					{
						var width = container.width();
						container.css('left', -width);
						container.stop().animate({left: left, opacity: 'toggle'}, speed, callback);
					}
					else
					{
						var width = container.width();
						container.stop().animate({left: -width, opacity: 'toggle'}, speed, callback);
					}
				break;

			case 'slideRight':
					if (show)
					{
						container.css('left', $(window).width() + width);
						container.stop().animate({left: left, opacity: 'toggle'}, speed, callback);
					}
					else
					{
						container.stop().animate({left: $(window).width() + width, opacity: 'toggle'}, speed, callback);
					}
				break;

			case 'slideTop':
					if (show)
					{
						height = container.height();
						container.css('top', -height);
						container.stop().animate({top: top, opacity: 'toggle'}, speed, callback);
					}
					else
					{
						height = container.height();
						//container.css('top', top);
						container.stop().animate({top: -height, opacity: 'toggle'}, speed, callback);
					}
				break;

			case 'slideBottom':
					if (show)
					{
						container.css('top', $(window).height() + height);
						container.stop().animate({top: top, opacity: 'toggle'}, speed, callback);
					}
					else
					{
						container.stop().animate({top: $(window).height() + height, opacity: 'toggle'}, speed, callback);
					}
				break;

			case 'slideZoom':
					if (show)
					{
						container.css('top', -height);
						container.css('left', left + (width / 2));

						container.stop().animate({width: 'toggle',  left: left, top: top, opacity: 'toggle'}, speed, callback);
					}
					else
					{
						container.stop().animate({top: -height,  left: left + (width / 2), width: 'toggle', opacity: 'toggle'}, speed, callback);
					}
				break;

			case 'growBox':
					container.stop().animate({width: 'toggle', height: 'toggle'}, callback);
				break;

			case 'fade':
			default:
				var funcEff = (show) ? 'fadeIn' : 'fadeOut';

				container.stop();

				container[funcEff](speed, callback);
				break;
			}
		};

		/* Private functions */

		/*
		 *	handleEffects() - Handle in/out effects.
		 *
		 *	PARAMETERS:
		 *		effect			- Effect to use.
		 *		css3Effect		- CSS3 effect.
		 *		show			- Specify if the effect is for show or for hide.
		 *		contentChange	- Specify if the effect is for content change.
		 *		callback		- Called when the animation finished.
		 *
		 *	RETURN VALUE:
		 *		If the function succeds, the return value is true, otherwise is false.
		 */
		function handleEffects(effect, css3Effect, show, contentChange, callback)
		{
			if (css3Effect && css3Effect != 'none' && (!speedo().browser.is_ie || speedo().browser.is_ie > 9))
			{
				/*if ($.isFunction(callback))
				{
					container.bind('animationend webkitAnimationEnd MSAnimationEnd oAnimationEnd', callback);
				}*/

				var animationEnd = function (ev)
				{
					if ($.isFunction(callback))
					{
						callback();
					}
					// We want to unbind this event after it has been executed so we don't brake something.
					container.unbind('animationend webkitAnimationEnd MSAnimationEnd oAnimationEnd', animationEnd);
				};

				container.bind('animationend webkitAnimationEnd MSAnimationEnd oAnimationEnd', animationEnd);

				// Reset the animation so we can play back;
				/*container.css({
					"-webkit-animation-name": "none",
					"-moz-animation-name": "none",
					"-o-animation-name": "none",
					"-ms-animation-name": "none",
					"animation-name": "none"
				});

				setTimeout(function ()
				{
					container.css({
						"-webkit-animation-name": "",
						"-moz-animation-name": "",
						"-o-animation-name": "",
						"-ms-animation-name": "",
						"animation-name": ""
					});
				}, 1);*/

				if (show)
				{
					container.show();

					$('body').addClass("speedo-effect-"+ css3Effect.toLowerCase() +"-active");
					container.removeClass("speedo-effect-"+ css3Effect.toLowerCase() +"-reverse");
					container.addClass("speedo-effect-"+ css3Effect.toLowerCase() +"-normal");

					/*container.css({
						"-webkit-animation-direction": "normal",
						"-moz-animation-direction": "normal",
						"-o-animation-direction": "normal",
						"-ms-animation-direction": "normal",
						"animation-direction": "normal"
					});*/
				}
				else
				{
					//container.hide();

					/*container.css({
						"-webkit-animation-direction": "reverse",
						"-mox-animation-direction": "reverse",
						"-o-animation-direction": "reverse",
						"-ms-animation-direction": "reverse",
						"animation-direction": "reverse"
					});*/

					$('body').removeClass("speedo-effect-"+ css3Effect.toLowerCase() +"-active");
					container.addClass("speedo-effect-"+ css3Effect.toLowerCase() +"-reverse");
					container.removeClass("speedo-effect-"+ css3Effect.toLowerCase() +"-normal");
				}

				container.css({
					"-webkit-animation-play-state": "running",
					"-moz-animation-play-state": "running",
					"-o-animation-play-state": "running",
					"-ms-animation-play-state": "running",
					"animation-play-state": "running"
				});

				return true;
			}

			if (effect && effect != 'none')
			{
				// If this is a function then we call it because we assume the user will handle the showing.
				if ($.isFunction(effect))
				{
					effect(container.get(0));
				}
				else if ($.isArray(effect))	// If this is a array we assume that it contains the effect name and the speed.
				{
					self.animateNotify(effect[0], effect[1], show, callback);
				}
				else // We assume that what remains is the effect name so we pass it to the animate function .
				{
					self.animateNotify(effect, 'slow', show, callback);
				}

				return true;
			}

			return false;
		}

		/*
		 *	on_show() - Called when the notify shows.
		 */
		function on_show(ev)
		{
			var size = self.get_box_size();

			left = size.left;
			top = size.top;
			width = size.width;
			height = size.height;

			if (!handleEffects(options.effectIn, options.css3Effects, true))
			{
				container.show();
			}
		}

		/*
		 *	on_hide() - called when the notify hides.
		 */
		function on_hide(ev)
		{
			var size = self.get_box_size();

			left = size.left;
			top = size.top;
			width = size.width;
			height = size.height;

			var effects = handleEffects(options.effectOut, options.css3Effects, false, false, function ()
			{
				// We need to remove the flash beacuse we don't want to have the movie/music playing in background.
				self.remove_embeded_object();

				container.hide();

				if (options.unload)
				{
					container.remove();
				}
			});
		}

		return self;
	});

})(jQuery, speedo().notify, speedo);